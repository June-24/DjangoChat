# -*- coding: utf-8 -*-

import nltk
import random
import string
import warnings
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import spacy

warnings.filterwarnings('ignore')

# Load SpaCy model
nlp = spacy.load('en_core_web_md')

f = open('C:\\Users\\User\\Downloads\\Act1Scene1.txt', 'r', errors='ignore')
raw = f.read()
raw = raw.lower()

sent_tokens = nltk.sent_tokenize(raw)  # Converts to list of sentences
word_tokens = nltk.word_tokenize(raw)  # Converts to list of words

sentToken = sent_tokens[:4]
wordToken = word_tokens[:4]

# Preprocessing
lemmer = nltk.stem.WordNetLemmatizer()

def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]

remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

# Greetings
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up", "hey")
GREETING_RESPONSES = ["hi", "hey", "nods", "hi there", "hello", "I am glad! you are talking to me"]

def greeting(sentence):
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

def sentence_vector(sentence):
    doc = nlp(sentence)
    return doc.vector

def response(user_response):
    chatbot_response = ''
    sent_tokens.append(user_response)
    
    user_embedding = sentence_vector(user_response)
    sentence_embeddings = np.array([sentence_vector(sentence) for sentence in sent_tokens])
    
    similarities = cosine_similarity([user_embedding], sentence_embeddings)
    idx = similarities.argsort()[0][-2]
    flat = similarities.flatten()
    flat.sort()
    req_similarity = flat[-2]
    
    if req_similarity == 0:
        chatbot_response = chatbot_response + "I am sorry! I don't understand you."
    else:
        chatbot_response = chatbot_response + sent_tokens[idx]
    
    sent_tokens.pop()  # Remove the user response to avoid duplication
    return chatbot_response

if __name__ == "__main__":
    flag = True
    print("Hello, there my name is Aneka. I will answer your queries. If you want to exit, type Bye!")
    while flag:
        user_response = input()
        user_response = user_response.lower()
        if user_response != 'bye':
            if user_response in ['thanks', 'thank you']:
                flag = False
                print("Aneka: You're welcome!")
            else:
                if greeting(user_response) is not None:
                    print("Aneka:" + greeting(user_response))
                else:
                    print("Aneka:", end='')
                    print(response(user_response))
        else:
            flag = False
            print("Aneka: Bye! Have a great time!")
